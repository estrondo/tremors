package tremors.zio.kafka

import tremors.generator.KeyGenerator
import tremors.generator.KeyLength
import zio.stream.ZStream

sealed trait KProducer[-A, +B]:

  def producerFunction: (A) => ZStream[Any, Throwable, (String, String, B)]

object KProducer:

  case class AutoGeneratedKey[A, B](topic: String, length: KeyLength, producer: A => ZStream[Any, Throwable, B])
      extends KProducer[A, B]:
    override def producerFunction: A => ZStream[Any, Throwable, (String, String, B)] =
      input => {
        for output <- producer(input) yield (topic, KeyGenerator.generate(length), output)
      }

  case class GeneratedKey[A, B](topic: String, producer: A => ZStream[Any, Throwable, (String, B)])
      extends KProducer[A, B]:
    override def producerFunction: A => ZStream[Any, Throwable, (String, String, B)] =
      input => {
        for output <- producer(input) yield (topic, output._1, output._2)
      }

  case class Custom[A, B](producer: A => ZStream[Any, Throwable, (String, String, B)]) extends KProducer[A, B]:
    override def producerFunction: A => ZStream[Any, Throwable, (String, String, B)] = producer
