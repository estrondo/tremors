package graboid.module

import com.softwaremill.macwire.Module
import graboid.CommandListener
import graboid.protocol.GraboidCommand
import graboid.protocol.GraboidCommandResult
import tremors.generator.KeyLength
import tremors.zio.kafka.KConsumer
import tremors.zio.kafka.KProducer
import tremors.zio.kafka.KReader
import tremors.zio.kafka.KWriter
import tremors.zio.kafka.cbor.Borer
import zio.Task
import zio.stream.ZStream

@Module
trait ListenerModule:

  def commandResultStream: ZStream[Any, Throwable, GraboidCommandResult]

object ListenerModule:

  def apply(commandModule: CommandModule, kafkaModule: KafkaModule): Task[ListenerModule] =
    for commandListener <- CommandListener(commandModule.commandExecutor)
    yield Impl(commandListener, kafkaModule)

  private class Impl(commandListener: CommandListener, kafkaModule: KafkaModule) extends ListenerModule:

    override val commandResultStream: ZStream[Any, Nothing, GraboidCommandResult] =
      given KReader[GraboidCommand]       = Borer.readerFor[GraboidCommand]
      given KWriter[GraboidCommandResult] = Borer.writerFor[GraboidCommandResult]

      val consumer = KConsumer[GraboidCommand, GraboidCommandResult](
        "graboid.command",
        (_, command) => ZStream.fromZIO(commandListener(command))
      )

      val producer = KProducer.AutoGeneratedKey[GraboidCommandResult, GraboidCommandResult](
        "graboid.command-result",
        KeyLength.Medium,
        ZStream.from
      )

      kafkaModule.router.subscribe(consumer, producer)
