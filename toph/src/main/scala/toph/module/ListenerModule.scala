package toph.module

import org.locationtech.jts.geom.GeometryFactory
import toph.centre.EventCentre
import toph.event.EventListener
import tremors.generator.KeyGenerator
import tremors.generator.KeyLength
import tremors.quakeml.Event
import tremors.zio.kafka.KafkaRouter
import tremors.zio.kafka.KConPro
import tremors.zio.kafka.KReader
import tremors.zio.kafka.KWriter
import tremors.zio.kafka.cbor.Borer
import zio.Task
import zio.ZIO
import zio.stream.ZStream

class ListenerModule(
    val event: ZStream[Any, Throwable, Event]
)

object ListenerModule:

  val GraboidEventTopic = "graboid.event"
  val TophEventTopic    = "toph.event"

  def apply(
      centreModule: CentreModule,
      kafkaModule: KafkaModule,
      geometryModule: GeometryModule
  ): Task[ListenerModule] =
    ZIO.succeed {
      new ListenerModule(
        event = subscribeGraboidEvent(centreModule.eventCentre, kafkaModule.router, geometryModule.geometryFactory)
      )
    }

  private def subscribeGraboidEvent(
      centre: EventCentre,
      router: KafkaRouter,
      geometryFactory: GeometryFactory
  ): ZStream[Any, Throwable, Event] =
    given KReader[Event] = Borer.readerFor[Event]
    given KWriter[Event] = Borer.writerFor[Event]
    val eventListener    = EventListener(centre, KeyGenerator, geometryFactory)

    router
      .subscribe(
        KConPro.AutoGeneratedKey(
          subscriptionTopic = GraboidEventTopic,
          productTopic = TophEventTopic,
          keyLength = KeyLength.Medium,
          mapper = (_, event: Event) => ZStream.fromZIO(eventListener(event))
        )
      )
